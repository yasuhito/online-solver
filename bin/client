#!/usr/bin/env ruby


$LOAD_PATH.unshift File.join( File.dirname( __FILE__ ), '../lib' )

require 'online-solver'
require 'optparse'


################################################################################
# Parse commandline options
################################################################################

$log = nil
$solver = nil
$ncpu = nil
$input = nil
$parameter = nil
$debug = false
$dry_run = false

opts = OptionParser.new

opts.banner = 'usage: client --log FILE --solver NAME --ncpu NUM --input FILE --parameter FILE [OPTIONS..]'

opts.separator " "

opts.on( '-l', '--log FILE', String, 'Log file.' ) do | v |
  $log = v
end

opts.on( '-s', "--solver NAME", String, "SDPA solver name." ) do | v |
  $solver = v.to_sym
end

opts.on( '-c', '--ncpu NUM', Integer, 'Number of CPUs to use.' ) do | v |
  $ncpu = v
end

opts.on( '-f', '--input FILE', String, 'Input file to SDPA solver.' ) do | v |
  $input = v
end

opts.on( '-p', '--parameter FILE', String, 'Parameter file to SDPA solver.' ) do | v |
  $parameter = v
end

opts.on( '-i', '--ssh-id SSH_ID', String, 'SSH identity file.' ) do | v |
  $ssh_id = v
end

opts.separator " "

opts.on( '-d', '--debug', 'Enable debug option.' ) do
  $debug = true
end

opts.on( '-n', '--dry-run', 'Print the commands that would be executed, but do not execute them.' ) do
  $dry_run = true
end

opts.on( '-h', '--help', 'Show this help message.' ) do
  puts opts
  exit 1
end

opts.parse! ARGV

if $solver.nil? or $ncpu == 0 or $input.nil? or $parameter.nil?
  puts opts
  exit 1
end


################################################################################
# main
################################################################################

begin
  if $log
    log = File.open( $log, 'w' )
  else
    log = $stderr
  end
  client = OnlineSolver::Client.new( log, :debug => $debug, :dry_run => $dry_run )
  client.start $solver, $ncpu, $input, $parameter, $ssh_id
rescue => e
  STDERR.puts 'ERROR: ' + e.message
  if $debug
    e.backtrace.each do | each |
      STDERR.puts each
    end
  end
  exit 1
end
